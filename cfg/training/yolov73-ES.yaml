# parameters
nc: 1  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple

# anchors
anchors:
#  - [12,16, 19,36, 40,28]  # P3/8
#  - [36,75, 76,55, 72,146]  # P4/16
#  - [142,110, 192,243, 459,401]  # P5/32

  - [ 14.39,13.33, 27.20,26.67, 35.56,45.63 ]  # P3/8
  - [ 61.44,45.78, 55.75,76.8, 90.88,76.8 ]  # P4/16
  - [ 80.64,126.35, 120.89,150.26, 184.31,221.44 ]  # P5/32

# yolov7 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Conv, [32, 3, 1]],  # 0               [32,3,1]--------32:输出通道数为32  3：卷积核尺寸为3 1：步长为1

   [-1, 1, Conv, [64, 3, 2]],  # 1-P1/2             Conv 就是卷积+BN+激活模块 所有模块在common.py中有定义
   [-1, 1, Conv, [64, 3, 1]],   #  2                                                     #  layer1==15行-18行
   [-1, 1, Conv, [128, 3, 2]],  # 3-P2/4

   [-1, 1, Conv, [64, 1, 1]],          #  4     21-26为ELAN模块
   [-2, 1, Conv, [64, 1, 1]],    #5
   [-1, 1, Conv, [64, 3, 1]],          #6
   [-1, 1, Conv, [64, 3, 1]],      # 7
   [-1, 1, Conv, [64, 3, 1]],     # 8
   [-1, 1, Conv, [64, 3, 1]],        # 9
   [[-1, -3, -5, -6], 1, Concat, [1]],  #10
   [-1, 1, Conv, [256, 1, 1]],  # 11

   [-1, 1, MP, []],                        #   12   maxpooling(MP)   实现空间降采样
   [-1, 1, Conv, [128, 1, 1]],
   [-3, 1, Conv, [128, 1, 1]],
   [-1, 1, Conv, [128, 3, 2]],
   [[-1, -3], 1, Concat, [1]],  # 16-P3/8

   [-1, 1, Conv, [128, 1, 1]],              #  35-42是ELAN模块   对空间降采样的特征图进行处理
   [-2, 1, Conv, [128, 1, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [[-1, -3, -5, -6], 1, Concat, [1]],

#   [-1, 1, CoordAtt, [512]],
   [-1, 1, ECA, [512]],
#   [-1, 1, DoubleAttention,[512,256,256]],
   [-1, 1, Conv, [512, 1, 1]],  # 24             C3



   [-1, 1, MP, []],                   #25
   [-1, 1, Conv, [256, 1, 1]],
   [-3, 1, Conv, [256, 1, 1]],
   [-1, 1, Conv, [256, 3, 2]],
   [[-1, -3], 1, Concat, [1]],  # 29-P4/16

   [-1, 1, Conv, [256, 1, 1]],     #
   [-2, 1, Conv, [256, 1, 1]],      #
   [-1, 1, Conv, [256, 3, 1]],        #
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [[-1, -3, -5, -6], 1, Concat, [1]],

   [-1, 1, ECA, [1024]],
#   [-1, 1, CoordAtt, [1024]],
  # [-1, 1, DoubleAttention,[1024,256,256]],
   [-1, 1, Conv, [1024, 1, 1]],  # 37             C4



#   [-1, 1, MP, []],
#   [-1, 1, Conv, [512, 1, 1]],
#   [-3, 1, Conv, [512, 1, 1]],
#   [-1, 1, Conv, [512, 3, 2]],
#   [[-1, -3], 1, Concat, [1]],  # 42-P5/32
#
#   [-1, 1, Conv, [256, 1, 1]],
#   [-2, 1, Conv, [256, 1, 1]],
#   [-1, 1, Conv, [256, 3, 1]],
#   [-1, 1, Conv, [256, 3, 1]],
#   [-1, 1, Conv, [256, 3, 1]],
#   [-1, 1, Conv, [256, 3, 1]],
#   [[-1, -3, -5, -6], 1, Concat, [1]],
#   [-1, 1, Conv, [1024, 1, 1]],  # 50            C5
   [-1, 1, ESblock, [1024]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [-1, 1, ESblock, [1024]],
  ]

# yolov7 head
head:
#  [[-1, 1, CoordAtt, [1024]],
   [[-1, 1, ECA, [1024]],
  #[[-1, 1, DoubleAttention,[1024,256,256]],
  [-1, 1, SPPCSPC, [512]], # 51

   [-1, 1, Conv, [256, 1, 1]],

#   [-1, 1, CoordAtt, [256]],
   [-1, 1, ECA, [256]],
   #[-1, 1, DoubleAttention,[256,256,256]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [39, 1, Conv, [256, 1, 1]], # route backbone P4        与P4融合
   [[-1, -2], 1, Concat, [1]],

   [-1, 1, Conv, [256, 1, 1]],
   [-2, 1, Conv, [256, 1, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [-1, 1, Conv, [128, 3, 1]],
   [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],
   [-1, 1, Conv, [256, 1, 1]], # 63

   [-1, 1, Conv, [128, 1, 1]],

#   [-1, 1, CoordAtt, [128]],
   [-1, 1, ECA, [128]],
   #[-1, 1, DoubleAttention,[128,256,256]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [25, 1, Conv, [128, 1, 1]], # route backbone P3     与P3融合     66
   [[-1, -2], 1, Concat, [1]],

   [-1, 1, Conv, [128, 1, 1]],
   [-2, 1, Conv, [128, 1, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [-1, 1, Conv, [64, 3, 1]],
   [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],
   [-1, 1, Conv, [128, 1, 1]], # 75         P3

   [-1, 1, MP, []],                      #  76
   [-1, 1, Conv, [128, 1, 1]],                  #  77
   [-3, 1, Conv, [128, 1, 1]],                #  78
   [-1, 1, Conv, [128, 3, 2]],                  #79
   [[-1, -3, 57], 1, Concat, [1]],              # 80

   [-1, 1, Conv, [256, 1, 1]],                  #81
   [-2, 1, Conv, [256, 1, 1]],                     #82
   [-1, 1, Conv, [128, 3, 1]],                    # 83
   [-1, 1, Conv, [128, 3, 1]],              # 84
   [-1, 1, Conv, [128, 3, 1]],                # 85
   [-1, 1, Conv, [128, 3, 1]],                  # 86
   [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],       #87
   [-1, 1, Conv, [256, 1, 1]], # 88     P4

   [-1, 1, MP, []],      # 89
   [-1, 1, Conv, [256, 1, 1]],    # 90
   [-3, 1, Conv, [256, 1, 1]],         # 91
   [-1, 1, Conv, [256, 3, 2]],         # 92
   [[-1, -3, 44], 1, Concat, [1]],            #93

   [-1, 1, Conv, [512, 1, 1]],
   [-2, 1, Conv, [512, 1, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [-1, 1, Conv, [256, 3, 1]],
   [[-1, -2, -3, -4, -5, -6], 1, Concat, [1]],
   [-1, 1, Conv, [512, 1, 1]], # 101         P5

   [70, 1, RepConv, [256, 3, 1]],       #第75层输出的结果      输出P3通道数
   [83, 1, RepConv, [512, 3, 1]],       #输出P4通道数
   [96, 1, RepConv, [1024, 3, 1]],     #输出P5通道数

   [[97,98,99], 1, RTDETRDecoder, [nc]],   # Detect(P3, P4, P5)      把102、103、104三层作为Detect模块输出。
  ]
